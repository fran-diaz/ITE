<?php
namespace ITE;

/**
 * Class that manages mysql connection
 * 
 * @copyright   Copyright © 2007-2014 Fran Díaz
 * @author      Fran Díaz <fran.diaz.gonzalez@gmail.com>
 * @license     http://opensource.org/licenses/MIT
 * @package     ITE
 * @access      public
 * 
 */

use \mysqli;

class mysql implements dbInterface{

    private $dbserver;
    private $dbuser;
    private $dbpassword;
    private $db;
    private $descriptor;
    private $result;
    public $container;

    public function __construct($container) {
        $this->container = $container;
        $this->dbserver = (defined("DBSERVER"))?DBSERVER:"localhost";
        $this->dbuser = (defined("DBUSER"))?DBUSER:"default_user";
        $this->dbpassword = (defined("DBPASS"))?DBPASS:"default_password";
        $this->db = (defined("DB"))?DB:"default_db";
        $this->bd_connect();
        
        if($this->dbuser == "default_user" && $this->dbpassword == "default_password" && $this->db == "default_db"){
            $this->container->__warn("Enlace a BDD temporal: default DB parameters.");
        }
    }
    
    /**
     * Function that reconnects to other database different from default
     * 
     * @param string $server Database server url to connect (Ex. domain.com:3306) Default port is 3306 if none is specified.
     * @param string $user Database user
     * @param string $pass Database password for user
     * @param string $db Database name
     * @return boolean $this->bd_connect result
     */
    public function reconnect($server,$user,$pass,$db){
        $this->dbserver = $server;
        $this->dbuser = $user;
        $this->dbpassword = $pass;
        $this->db = $db;
        return $this->bd_connect();
    }

    /**
     * Function that connects to database from current defined parameters
     * 
     * @return boolean If connection was realized true, else false.
     */
    public function bd_connect() {
        $this->descriptor = new mysqli($this->dbserver, $this->dbuser, $this->dbpassword,$this->db);
        if($this->descriptor->connect_errno){
            if($this->container->__debug()){$this->container->debug->error("No ha sido posible conectar al servidor de base de datos:".$this->descriptor->connect_error);}
            else{trigger_error("No ha sido posible conectar al servidor de base de datos:".$this->descriptor->connect_error,E_USER_ERROR);}
            return false;
        }
        if (!$this->descriptor->set_charset("utf8")) {
            printf("Error cargando el conjunto de caracteres utf8: %s\n", $this->descriptor->error);
            return false;
        }
        return true;
    }

    /**
     * Function that interacts with database and make queries
     * 
     * @param string $query String to be queried to database
     * @return integer|boolean Returns inserted id (ID) generated by the query, 0 if the query does not generate any new registry or false if it fails.
     */
    protected function bd($query) {
        $this->result = $this->descriptor->query($query);
        if($this->result === false){
            if($this->container->__debug()){$this->container->debug->error($this->descriptor->error." [-->] ".$query);}
            else{trigger_error($this->descriptor->error." [-->] ".$query,E_USER_ERROR);}
            return false;
        }
        return $this->descriptor->insert_id;
    }
    
    /**
     * Function that process result from database query and generate clean array with count of elements
     * 
     * @param boolean $sum Define if the number of elements will be counted and a variable 'num_elements' be created with the result. For backward compatibility, the variable may be named as 'numero'
     * @return array|boolean Clean array of elements or false if failed.
     */
    protected function bd_format($sum = false) {
        while($aux = $this->result->fetch_assoc()) {
            $keys = array_keys($aux);
            $formated[] = $aux;
        }
        if(isset($formated)) {
            if($sum) {$formated['numero'] = count($formated);$formated['num_elements'] = count($formated);}
            return $formated;
        }else{
            return false;
        }
    }

    /**
     * Function that logs database operations in log table from target database
     * 
     * @param string $tabla Name of table affected by query
     * @param string $id Name of id affected by query
     * @param string $accion Name of action executed by the query
     * @param string $log Log message that defines the operation
     */
    public function log($table_name, $id, $action,$log) {
        $uid = (isset($_SESSION['uid']))?$_SESSION['uid']:"0";
        $query = "INSERT INTO log (usuarios_id, tabla, id, accion, log, fecha) VALUES ('$uid','$table_name','$id','$action','$log',NOW())";
        return $this->bd($query);
    }

    /**
     * Same function as 'select', maintained only for backward compatibility purposes.
     */
    public function consultar($table,$where = "",$order = "",$sum = true,$log = false) {
        return $this->select($table,$where,$order,$sum,$log);
    }
    
    /**
     * Function that generates a SELECT query
     * 
     * @param string $table Queried table name
     * @param string $where Where condition of query
     * @param string $order Order condition of query
     * @param boolean $sum If the number of elements (num_elements) variable is returned
     * @param boolean $log If the query will be loged
     * @return array|boolean Returns the array of SELECTED elements or false if fails
     */
    public function select($table,$where = "",$order = "",$sum = true,$log = false) {
        $aux = explode(" ",$table);
        $query = (in_array("SELECT",$aux))?"$table ":"SELECT * FROM $table ";
        $query .= ($where != "")?" WHERE $where ":"";

        if($order != "") {
            $aux = explode(" ",$order);
            $query .= (in_array("GROUP",$aux))?$order:" ORDER BY $order ";
        }
        
        if($this->bd($query) !== false){
            if($log){$this->log($table, 0, "Consultar", "- Definir patron de registro log -");}
            return $this->bd_format($sum);
        }else{
            return false;
        }
    }
    
    /**
     * Function that executes a query completely defined by the user
     * 
     * @param string $query Query to be executed
     * @param string $sum If the number of elements (num_elements) key is returned in the array
     * @return array|boolean Returns the array of elements obtained with the query or false if fails
     */
    public function free_query($query,$sum = true) {
        if(php_sapi_name() != 'cli'){$this->container->__info("Free query en ejecución: $query");}
        $queries = explode(';',$query);
        if(substr($query,-1) == ';'){array_pop($queries);}

        if(count($queries) > 1){
            foreach($queries as $query){
                if($this->bd($query) === false){
                    $this->container->__error("Subquery of Free query failed: $query");
                }
            }
            return $this->bd_format($sum);
        }else{
            if($this->bd($query) !== false){
                if(is_null($sum)){return true;}
                else{return $this->bd_format($sum);}
            }else{
                return false;
            }
        }
    }

    /**
     * Same function as 'insert', maintained only for backward compatibility purposes.
     */
    public function insertar($table,$fields,$values) {
        return $this->insert($table,$fields,$values);
    }
    
    /**
     * Function that executes a INSERT query
     * 
     * @param string $table Queried table name
     * @param array $fields Fields from table to insert
     * @param array $values Values that will be inserted
     * @return integer|boolean ID of generated row in table (autoincrement column) or false if failed
     */
    public function insert($table,$fields,$values) {
        $query = "INSERT INTO $table (";
        $query .= implode(", ",$fields);
        $query .= ") VALUES ('";
        $query .= implode("', '",$values);
        $query .= "')";
        $query = str_replace("'NOW()'", "NOW()", $query);

        return $this->bd($query);
    }

    /**
     * Same function as 'update', maintained only for backward compatibility purposes.
     */
    public function editar($table,$values,$id,$where="",$preselect=1) {
        return $this->update($table,$values,$id,$where,$preselect);
    }
    
    /**
     * Function that executes a UPDATE query
     * 
     * @param string $table Queried table name
     * @param array $values Values that will be updated
     * @param integer $id Field ID to locate row that will be updated
     * @param string $where Where condition of query
     * @param boolean $preselect If will be saved the information before update the row and appended to the log
     */
    public function update($table,$values,$id, $where = "",$preselect = true) {
        if($preselect) {
            $query = "SELECT * FROM $table WHERE ".$table."_id = '$id' LIMIT 1";
            if($this->bd($query) !== false){
                $data = $this->bd_format();
            }else{
                $data = 'Data not found';
            }   
        }

        $query = "UPDATE $table SET ";
        $query .= implode(", ",$values);
        if($where != "") {
            $query .= " WHERE $where";
        }
        else {
            $query .= " WHERE ".$table."_id = '$id'";
        }
        $query = str_replace("'NOW()'", "NOW()", $query);
        if($this->bd($query) === false){
            return false;
        }else{
            if($preselect == 1) {
                $log = "Valor previo [".implode(", ",$data[0])."]";
            }else{$log = "Editado elemento";}
            $this -> log($table, $id,"editar",$log);
            return true;
        }
    }
    
    /**
     * Same function as 'delete', maintained only for backward compatibility purposes.
     */
    public function borrar($table,$id,$skip_log = false) {
        return $this->delete($table,$id,$skip_log = false);
    }
    
    /**
     * Function that executes a DELETE query
     * 
     * @param string $table Queried table name
     * @param integer $id Field ID to locate row that will be updated
     * @param boolean $skip_log If the current data will be saved before delete it
     */
    public function delete($table,$id,$skip_log = false) {
        if($skip_log == false){
            $query = "SELECT * FROM $table WHERE ".$table."_id = '$id' LIMIT 1";
            $this->bd($query);
            $data = $this->bd_format();

            $this -> log($table, $id,"borrar","Valor previo [".$this->descriptor->real_escape_string(implode(", ",$data[0]))."]");
        }

        $query = "DELETE FROM $table WHERE ".$table."_id = '$id'";
        $this->bd($query);
    }
    
    /**
     * Function that extract information about columns from given table
     * 
     * @param string $table Queried table name
     * @param boolean $log If the operation will be loged
     * @return array|boolean Returns an array with table fields or false if it fails
     */
    public function get_columns_info($table,$log = false) {
        if($this->bd("SHOW FULL COLUMNS FROM $table") !== false){
            if($log){$this->log($table, 0, "Consultar", "- Definir patron de registro log -");}
            return $this->bd_format(false);
        }else{
            return false;
        }
    }
    
    /**
     * Function that HTML code for input label
     * 
     * @param string $name Input's name attribute
     * @param string $label String to be showed in the label
     */
    public function field_label($name,$label){
        if($label === false){
            $format_name = str_replace("_", " ", $name);
            $format_name = ucfirst($format_name);
            if(substr($format_name, -3, 3) == " id"){$format_name = substr($format_name, 0, (strlen($format_name)-3));}
        }else{
            $format_name = $label;
        }
        
        echo '<label for="'.$name.'">'.$format_name.'</label>';
    }
    
    /**
     * Function that creates HTML code of input field for represent a varchar value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param integer $size Number of max characters allowed in the field
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     */
    public function varchar_field($name,$label,$size,$value = "",$config=false){
        echo '<div class="form-group">';
        $this->field_label($name,(isset($config['label']))?$config['label']:false);
        echo '<input type="text" name="'.$name.'" id="'.$name.'" maxlength="'.((isset($config['size']))?$config['size']:$size).'" '.((isset($config['class']))?'class="'.$config['class'].'"':"").' value="'.$value.'" placeholder="'.((isset($config['placeholder']))?$config['placeholder']:'').'" />';
        echo '</div>';
    }
    
    /**
     * Function that creates HTML code of input field for represent a integer value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param integer $size Number of max characters allowed in the field
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     */
    public function int_field($name,$label,$size,$value = "",$config=false){
        echo '<div class="form-group">';
        $this->field_label($name,(isset($config['label']))?$config['label']:false);
        echo '<input type="number" name="'.$name.'" id="'.$name.'" maxlength="'.((isset($config['size']))?$config['size']:$size).'" '.((isset($config['class']))?'class="'.$config['class'].'"':"").' value="'.$value.'" placeholder="'.((isset($config['placeholder']))?$config['placeholder']:'').'" />';
        echo '</div>';
    }
    
    /**
     * Function that creates HTML code of input field for represent a double value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param integer $size Number of max characters allowed in the field
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     */
    public function double_field($name,$label,$size,$value = "",$config=false){
        echo '<div class="form-group">';
        $this->field_label($name,(isset($config['label']))?$config['label']:false);
        echo '<input type="number" name="'.$name.'" id="'.$name.'" maxlength="'.((isset($config['size']))?$config['size']:$size).'" '.((isset($config['class']))?'class="'.$config['class'].'"':"").' value="'.$value.'" placeholder="'.((isset($config['placeholder']))?$config['placeholder']:'').'" />';
        echo '</div>';
    }
    
    /**
     * Function that creates HTML code of input field for represent a date value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     */
    public function date_field($name,$label,$value = "",$config=false){
        echo '<div class="form-group">';
        $this->field_label($name,(isset($config['label']))?$config['label']:false);
        echo '<input type="date" class="datepicker '.((isset($config['class']))?$config['class']:"").'" name="'.$name.'"  value="'.$value.'"  placeholder="'.((isset($config['placeholder']))?$config['placeholder']:'').'" />';
        echo '</div>';
    }
    
    /**
     * Function that creates HTML code of input field for represent a datetime value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     */
    public function datetime_field($name,$label,$value = "",$config=false){
		echo '<div class="form-group">';
        $this->field_label($name,(isset($config['label']))?$config['label']:false);
        echo '<input type="datetime-local" class="datetimepicker '.((isset($config['class']))?$config['class']:"").'" name="'.$name.'" value="'.$value.'" placeholder="'.((isset($config['placeholder']))?$config['placeholder']:'').'" />';
		echo '</div>';
    }
    
    /**
     * Function that creates HTML code of input field for represent a time value
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     */
    public function time_field($name,$label,$value = "",$config=false){
		echo '<div class="form-group">';
        $this->field_label($name,(isset($config['label']))?$config['label']:false);
        echo '<input type="time" class="timepicker '.((isset($config['class']))?$config['class']:"").'" name="'.$name.'" value="'.$value.'" placeholder="'.((isset($config['placeholder']))?$config['placeholder']:'').'" />';
		echo '</div>';
    }
    
    /**
     * Function that creates HTML code of input field for represent a id field (relative to self table or foreign key)
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $values Default value to show in the field
     * @param integer $size Number of max characters allowed in the field
     * @param array $config Array of config parametters relative to the field 
     */
    public function id_field($name,$label,$values,$size = "1",$config=false){
		echo '<div class="form-group">';
        $this->field_label($name,(isset($config['label']))?$config['label']:false);
        if(!isset($values) || count($values) <= 0){
            echo '<select name="'.$name.'" id="'.$name.'" disabled="disabled" size="'.((isset($config['size']))?$config['size']:$size).'" '.((isset($config['class']))?'class="'.$config['class'].'"':"").' >';
            echo '<option value="0">Sin datos, deben crearse antes de este paso.</option>';
            echo '</select>';
        }else{
            echo '<select name="'.$name.'" id="'.$name.'" size="'.((isset($config['size']))?$config['size']:$size).'" '.((isset($config['class']))?'class="'.$config['class'].'"':"").' >';
            foreach($values as $value){
                if(isset($value['selected'])){echo '<option value="'.$value[1].'" selected="selected">'.$value[0].'</option>';}
                else{echo '<option value="'.$value[1].'">'.$value[0].'</option>';}
            }
            echo '</select>';
        }
		echo '</div>';
    }
    
    /**
     * Function that creates HTML code of input field for represent a enum field
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $values Array of falues to show in the field. Ex.: array(array(Spain, SP, 'selected' => true),array(Europe, EU))
     * @param integer $size Number of max characters allowed in the field
     * @param array $config Array of config parametters relative to the field 
     */
    public function enum_field($name,$label,$values,$size = "1",$config=false){
		echo '<div class="form-group">';
		$this->field_label($name,(isset($config['label']))?$config['label']:false);
		
        if(isset($config['input_type']) && $config['input_type'] == "checkbox"){
			foreach($values as $value){
				echo '<label class="checkbox-inline">
					<input type="checkbox" name="'.$name.'" value="'.$value[1].'" '.((isset($value['selected']))?'checked="checked"':'').'> '.$value[0].'
				</label>';
			}
		}elseif(isset($config['input_type']) && $config['input_type'] == "radio"){
			foreach($values as $value){
				echo '<label class="radio-inline">
					<input type="radio" name="'.$name.'" value="'.$value[1].'" '.((isset($value['selected']))?'checked="checked"':'').'> '.$value[0].'
				</label>';
			}
		}else{
			echo '<select name="'.$name.'" id="'.$name.'" size="'.((isset($config['size']))?$config['size']:$size).'" '.((isset($config['class']))?'class="'.$config['class'].'"':"").'>';
			foreach($values as $value){
				if(isset($value['selected'])){echo '<option value="'.$value[1].'" selected="selected">'.$value[0].'</option>';}
				else{echo '<option value="'.$value[1].'">'.$value[0].'</option>';}
			}
			echo '</select>';
		}
		
		echo '</div>';
    }
    
    /**
     * Function that creates HTML code of textarea that represent a text field
     * 
     * @param string $name Name of the input field
     * @param string $label String that will be showed in the label
     * @param string $value Default value to show in the field
     * @param array $config Array of config parametters relative to the field 
     */
    public function text_field($name,$label,$value = "",$config=false){
		echo '<div class="form-group">';
        $this->field_label($name,(isset($config['label']))?$config['label']:false);
        echo '<textarea name="'.$name.'" id="'.$name.'" '.((isset($config['class']))?'class="'.$config['class'].'"':"").' placeholder="'.((isset($config['placeholder']))?$config['placeholder']:'').'">'.$value.'</textarea>';
		echo '</div>';
    }
    
    /**
     * Function that creates a hidden input field
     * 
     * @param string $name Name of the input field
     * @param string $value Default value to show in the field
     */
    public function hidden_field($name,$value = ""){
        echo '<input type="hidden" name="'.$name.'" id="'.$name.'" value="'.$value.'" />';
    }
    
    /**
     * Function that retrieves a field comment and convert to usable array
     * 
     * @param string $field_comment Coment of field from database
     * @return array Array with configuration parameters from field
     */
    public static function field_config($field_comment){
        /*
        * Avaliable configs:
        *  - label: custom labels
        *  - class: custom classes
        *  - default_value: value por defecto
        *  - external_table: nombre de la tabla externa
        *  - external_field: nombre del campo externo
        *  - placeholder: valor para el placeholder
        *  - size: Max charater length of field 
        */
        if($field_comment == ""){return true;}
        
        $tokens = explode(",",$field_comment);
        if(substr($field_comment, -1, 1) == ","){array_pop($tokens);}
        if($tokens)foreach($tokens as $token){
            $conf = explode(":",$token);
            $field_config[$conf[0]] = $conf[1];
        }
        return $field_config;
    }
    
    /**
     * Function that creates HTML code of fields to insert form from given table structure
     * 
     * @param string $table Target table name
     * @param array $exclude_fields Array of field names that will be omitted
     */
    public function create_add_form_fields($table,$exclude_fields){
        $fields = $this->get_columns_info($table);
        foreach($fields as $field){
            $name = $field['Field'];
            $auxname = $table."_id";
            $field_config = self::field_config($field['Comment']);

            if(in_array($name, $exclude_fields))continue;
            if($name == $auxname){continue;}
            if(strpos($name, "_id")){
                if(isset($field_config['external_table'])){$external_rows = $this->consultar($field_config['external_table']);$field_name = $field_config['external_table']."_id";}
                else{$external_rows = $this->consultar(substr($name, 0, strlen($name)-3));$field_name = $name;}
                
                $values = array();
                if($external_rows['numero'] <= 0){$this->container->__warn("No es posible crear los valores del campo SELECT: no se han recuperado datos de la tabla externa (".substr($name, 0, strlen($name)-3).") [".__FUNCTION__.",".__LINE__."]");}
                else{array_pop($external_rows);foreach($external_rows as $row_aux){
                    $row_aux_keys = array_keys($row_aux);
                    if(isset($field_config['external_field'])){$external_field = $field_config['external_field'];}else{$external_field = $row_aux_keys[1];}
                    if($row_aux[$name] == $field['Default']){$values[] = array($row_aux[$external_field],$row_aux[$field_name],"selected" => true);}
                    elseif(isset($field_config['default_value']) && $row_aux[$name] == $field_config['default_value']){$values[] = array($row_aux[$external_field],$row_aux[$field_name],"selected" => true);}
                    else{$values[] = array($row_aux[$external_field],$row_aux[$field_name]);}
                }}
                $this->id_field($name,false,$values,"1",$field_config);
                unset($row_aux, $values);
                continue;
            }
            
            $value = (isset($field_config['default_value']))?$field_config['default_value']:$field['Default'];
            $type = explode("(", $field['Type']);
            if(count($type) >> 1){$size = explode(")", $type[1]);$size = $size[0];}
            switch($type[0]){
                case "varchar":$this->varchar_field($name,false, $size,$value,$field_config);break;
                case "int":$this->int_field($name,false, $size,$value,$field_config);break;
                case "double":$this->double_field($name,false, $size,$value,$field_config);break;
                case "date":$this->date_field($name,false,$value,$field_config);break;
                case "datetime":$this->datetime_field($name,false,$value,$field_config);break;
                case "time":$this->time_field($name,false,$value,$field_config);break;
                case "text":$this->text_field($name,false,$value,$field_config);break;
                case "enum":
                    $values = $size;
                    $tokens = explode(",",$values);
                    $values = array();
                    foreach($tokens as $token){$values[] = (substr($token, 1, -1) == $field['Default'])?array(substr($token, 1, -1),substr($token, 1, -1),"selected" => true):array(substr($token, 1, -1),substr($token, 1, -1));}
                    $this->enum_field($name,false,$values,"1",$field_config);
                break;
                default: $this->container->__error("Imposible crear campo del formulario: el tipo de campo no ha sido reconocido ($type[0]) [".__METHOD__.",".__LINE__."]"); break;
            }
        }
        $this->hidden_field("t",$table);
    }
    
    /**
     * Function that creates HTML code of fields from given table structure
     * 
     * @param string $table Target table name
     * @param integer $id Target row ID to locate in database
     * @param array $exclude_fields Array of field names that will be omitted
     */
    public function create_edit_form_fields($table,$id,$exclude_fields){
        $edit_data = $this->consultar($table,$table."_id = '$id'");
        $fields = $this->get_columns_info($table);

        foreach($fields as $field){
            $name = $field['Field'];
            $auxname = $table."_id";
            $field_config = self::field_config($field['Comment']);

            if(in_array($name, $exclude_fields))continue;
            if($name == $auxname){continue;}
            if(strpos($name, "_id")){
                if(isset($field_config['external_table'])){$aux_table = $field_config['external_table'];$field_name = $field_config['external_table']."_id";}
                else{$aux_table = substr($name,0,-3);$field_name = $name;}
                $result_aux = $this->consultar($aux_table,"","",false,false);
				
				
                foreach($result_aux as $row_aux){
                    $keys = array_keys($row_aux);
                    if(isset($field_config['external_field'])){$external_field = $field_config['external_field'];}else{$external_field = $keys[1];}
                    if($row_aux[$field_name] == $edit_data[0][$name]){$values[] = array($row_aux[$external_field],$row_aux[$field_name],"selected" => true);}
                    else{$values[] = array($row_aux[$external_field],$row_aux[$field_name]);}
                    unset($keys);
                }

                $this->id_field($name,false, $values, "1",$field_config);
                unset($row_aux, $values);
                continue;
            }

            $type = explode("(", $field['Type']);
            if(count($type) >> 1){$size = explode(")", $type[1]);$size = $size[0];}
            switch($type[0]){
                case "varchar":$this->varchar_field($name,false, $size,$edit_data[0][$name],$field_config);break;
                case "int":$this->int_field($name,false, $size,$edit_data[0][$name],$field_config);break;
                case "double":$this->double_field($name,false, $size,$edit_data[0][$name],$field_config);break;
                case "datetime":$this->datetime_field($name,false,$edit_data[0][$name],$field_config);break;
                case "date":$this->date_field($name,false,$edit_data[0][$name],$field_config);break;
                case "time":$this->time_field($name,false,$edit_data[0][$name],$field_config);break;
                case "text":$this->text_field($name,false,$edit_data[0][$name],$field_config);break;
                case "enum":
                    $values = $size;
                    $tokens = explode(",",$values);
                    $values = array();
                    foreach($tokens as $token){

                        if($edit_data[0][$name] == substr($token,1,-1)){
                            $values[] = array(substr($token, 1, -1),substr($token, 1, -1),"Selected"=>true);
                        }else{
                            $values[] = array(substr($token, 1, -1),substr($token, 1, -1));
                        }
                    }
                    $this->enum_field($name,false,$values,"1",$field_config);
                break;
                default: $this->container->__error("Imposible crear campo del formulario: el tipo de campo no ha sido reconocido ($type[0]) [".__METHOD__.",".__LINE__."]"); break;
            }
            unset($name,$aux_table,$result_aux,$values);
        }
        $this->hidden_field("id",$id);
        $this->hidden_field("t",$table);
    }
    
    /**
     * Function that creates a insert form from database table
     * 
     * @param string $table Target table name
     * @param string $url Action url where form data will be submitted
     * @param array $exclude_fields Array of field names that will be omitted
     * @param string $id Id attribute of final form
     * @return string HTML code of form
     */
    public function create_add_form($table,$url="",$exclude_fields=array(),$id=""){
        ob_start();
        echo '<form class="add_form clearfix" '.((strlen($id) > 0)?'id="'.$id.'"':'').' method="post" lang="es" enctype="multipart/form-data" action="'.$url.'">';
        // Retrieve field information
        $this->create_add_form_fields($table,$exclude_fields);
        echo '<input type="submit" class="btn btn-success" value="Guardar datos" name="create" />';
        echo '</form>';
        $buffer = ob_get_contents();
        ob_end_clean();
        return $buffer;
    }
    
    /**
     * Function that creates a insert form from database table
     * 
     * @param string $table Target table name
     * @param string $id Id of table row that will be updated
     * @param string $url Action url where form data will be submitted
     * @param array $exclude_fields Array of field names that will be omitted
     * @param string $idA Id attribute of final form
     * @return string HTML code of form
     */
    public function create_edit_form($table,$id,$url="",$exclude_fields=array(),$idA=""){
        ob_start();
        echo '<form class="edit_form clearfix" '.((strlen($idA) > 0)?'id="'.$idA.'"':'').'" method="post" lang="es" enctype="multipart/form-data" action="'.$url.'">';
        // Retrieve field information
        $this->create_edit_form_fields($table,$id,$exclude_fields);
        echo '<input type="submit" class="btn btn-success" value="Modificar datos" name="update" />';
        echo '<input type="button" class="btn btn-warning del_warning" value="Borrar datos" name="delete" rel="'.$table.'" ref="'.$id.'" />';
        echo '</form>';
        $buffer = ob_get_contents();
        ob_end_clean();
        return $buffer;
    }
    
    /**
     * Function that creates a HTML table from database table structure to show his data
     * 
     * @param string $table Target table name
     * @param string $table_id_field Name of the table field that will be used to represent the field ID from another table
     * @param array $columns Array of columns to show and his names that will be displayed
     * @return string HTML code of table
     */
    public function create_table_rows($table,$table_id_field,$columns){
        $html = "";
        $rows = $this->consultar($table,"","$table_id_field DESC LIMIT 1000",false,false);
        $aux_col_info = $this->get_columns_info($table);
        if($rows){foreach($rows as $row){
            $html .= "\n<tr ref=\"".$row[$table_id_field]."\">";
            foreach($columns as $column){
                $column_info = explode(":",$column);
                if(strpos($column_info[1], "_id")){
					// Extraigo la configuración del campo elegido
                    foreach($aux_col_info as $field){
                        if($field['Field'] == $column_info[1]){
                            $field_config = $this->field_config($field['Comment']);
                            break;
                        }
                    }
					
                    if(isset($field_config['external_table'])){$aux_table = $field_config['external_table'];$aux_id_field = $field_config['external_table']."_id";}
                    else{$aux_table = substr($column_info[1], 0,-3);$aux_id_field = $column_info[1];}

                    $aux = $this->consultar($aux_table,"$aux_id_field = '".$row[$column_info[1]]."'");
                    
                    if($aux){
                        if(isset($field_config['external_field'])){$html .= "<td>".$aux[0][$field_config['external_field']]."</td>";
                        }else{if(isset($aux[0][1])){$html .= "<td>".$aux[0][1]."</td>";}else{$html .= '<td style="color:#f00;">-</td>';$this->container->__warn('No existe el campo externo que se intenta mostrar en el campo de la tabla ($aux[0][1]) '.__METHOD__.','.__LINE__.']');}}
                    }else{
                        
                        $html .= '<td style="color:#f00;">[No encontrado]</td>';
                        $this->container->__warn('No existen los datos referenciados por el campo de id ('.$column_info[1].' = \''.$row[$column_info[1]].'\')');
                    }
                    
                }else{
                    foreach($aux_col_info as $field){
                        if($field['Field'] == $column_info[1]){
                            if($field['Type'] == "date"){
                                $html .= "<td>".$this->container->funcs->date_format($row[$column_info[1]],1)."</td>";
                            }elseif($field['Type'] == "datetime"){
                                $html .= "<td>".$this->container->funcs->date_format($row[$column_info[1]],4)."</td>";
                            }else{$html .= "<td>".$row[$column_info[1]]."</td>";}
                        }
                    }
                }
            }
            $html .= "</tr>";
            
        }$num_rows = count($rows);
        unset($aux,$aux_table,$aux_col_info,$field_config,$column);
        }else{$html .= "<tr><td></td><td colspan=\"5\">En estos momentos no existen datos.</td></tr>";$num_rows = 0;}
        return $html;
    }
}