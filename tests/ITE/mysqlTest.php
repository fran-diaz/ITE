<?php
namespace ITE;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-10 at 16:25:40.
 * 
 * @todo Create dummy table for tests and replace it in the files.
 * @group ite
 * @group mysql
 * 
 */

class mysqlTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Error handler trait.
     */
    use errorHandler;
    
    /**
     * @var mysql
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->initErrorHandler();
        $_ITE = ite::singleton();
        $this->object = new mysql($_ITE);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $output = $this->getErrors();
                
        if($output !== false){
            echo $output;
        }
    }

    /**
     * @covers ITE\mysql->reconnect
     */
    public function testReconnect()
    {
        $this->assertFalse($this->object->reconnect('dummyserver', DBUSER, DBPASS, DB));
        $this->assertTrue($this->object->reconnect(DBSERVER, DBUSER, DBPASS, DB));
    }

    /**
     * @covers ITE\mysql->bd_connect
     */
    public function testBd_connect()
    {
        $this->assertTrue($this->object->bd_connect());
    }

    /**
     * @covers ITE\mysql::log
     */
    public function testLog()
    {
        $result = $this->object->log('dummyTable','dummyId','dummyAction','dummyLog');
        $this->assertInternalType('integer',$result);
        $this->assertNotSame(0,$result);
    }

    /**
     * @covers ITE\mysql->consultar
     */
    public function testConsultar()
    {
        $this->assertCount(1,$this->object->consultar("log","1=1","log_id DESC LIMIT 1",false,false));
        $this->assertFalse($this->object->consultar("dummyTable","1=1","log_id DESC LIMIT 1",false,false));
    }

    /**
     * @covers ITE\mysql::select
     */
    public function testSelect()
    {
        $this->assertCount(1,$this->object->select("log","1=1","log_id DESC LIMIT 1",false,false));
        $this->assertFalse($this->object->select("dummyTable","1=1","log_id DESC LIMIT 1",false,false));
    }

    /**
     * @covers ITE\mysql->free_query
     */
    public function testFree_query()
    {
        $this->assertCount(1,$this->object->free_query("SELECT * FROM log WHERE 1=1 LIMIT 1",false));
        $this->assertArrayHasKey('num_elements',$this->object->free_query("SELECT * FROM log WHERE 1=1 LIMIT 1",true));
        $this->assertCount(2,$this->object->free_query("SELECT * FROM log WHERE 1=1 LIMIT 1;SELECT log_id FROM log WHERE 1=1 LIMIT 2",false));
        $this->assertFalse($this->object->free_query("SELECT * FROM log WHERE log_id = '0' LIMIT 1",true));
    }

    /**
     * @covers ITE\mysql->insertar
     */
    public function testInsertar()
    {
        $table = 'log';
        $fields = array('log');
        $values = array('dummy text');
        $result_id = $this->object->insertar($table, $fields, $values);
        $this->assertInternalType('integer',$result_id);
        $table = 'dummyTable';
        $this->assertFalse($this->object->insertar($table, $fields, $values));
        
        return $result_id;
    }

    /**
     * @covers ITE\mysql->insert
     */
    public function testInsert()
    {
        $table = 'log';
        $fields = array('log');
        $values = array('dummy text');
        $result_id = $this->object->insert($table, $fields, $values);
        $this->assertInternalType('integer',$result_id);
        $table = 'dummyTable';
        $this->assertFalse($this->object->insert($table, $fields, $values));
        
        return $result_id;
    }

    /**
     * @covers ITE\mysql->editar
     * @depends testInsertar
     */
    public function testEditar($id)
    {
        $table = 'log';
        $values = array("log = 'Tested!'");

        $this->assertTrue($this->object->editar($table, $values, $id));
        $this->assertFalse($this->object->editar($table, $values, '\'S'));
    }

    /**
     * @covers ITE\mysql->update
     * @depends testInsert
     */
    public function testUpdate($id)
    {
        $table = 'log';
        $values = array("log = 'Tested!'");

        $this->assertTrue($this->object->update($table, $values, $id));
        $this->assertFalse($this->object->update($table, $values, '\'S'));
    }

    /**
     * @covers ITE\mysql->borrar
     * @depends testInsertar
     */
    public function testBorrar($id)
    {
        $table = 'log';
        
        $this->assertEquals(0,$this->object->borrar($table, $id));
    }

    /**
     * @covers ITE\mysql->delete
     * @depends testInsert
     */
    public function testDelete($id)
    {
        $table = 'log';

        $this->assertEquals(0,$this->object->delete($table, $id));
    }

    /**
     * @covers ITE\mysql->get_columns_info
     */
    public function testGet_columns_info()
    {
        $table = 'log';
        
        $result = $this->object->get_columns_info($table);
        $this->assertInternalType('array',$result);
    }

    /**
     * @covers ITE\mysql->field_label
     */
    public function testField_label()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $expected_result_1 = '<label for="dummy_field">Dummy field</label>';
        $expected_result_2 = '<label for="dummy_field">dummy text</label>';
        
        $this->assertEquals($this->object->field_label($name),$expected_result_1);
        $this->assertEquals($this->object->field_label($name,$label),$expected_result_2);
    }

    /**
     * @covers ITE\mysql->varchar_field
     */
    public function testVarchar_field()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $size = 100;
        $expected_result = '<div class="form-group"><label for="dummy_field">dummy text</label><input type="text" name="dummy_field" id="dummy_field" maxlength="100"  value="" placeholder="" /></div>';
        
        $this->assertEquals($this->object->varchar_field($name, $label, $size),$expected_result);
    }

    /**
     * @covers ITE\mysql->int_field
     */
    public function testInt_field()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $size = 100;
        $expected_result = '<div class="form-group"><label for="dummy_field">dummy text</label><input type="number" name="dummy_field" id="dummy_field" maxlength="100"  value="" placeholder="" /></div>';
        
        $this->assertEquals($this->object->int_field($name, $label, $size),$expected_result);
    }

    /**
     * @covers ITE\mysql->double_field
     */
    public function testDouble_field()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $size = 100;
        $expected_result = '<div class="form-group"><label for="dummy_field">dummy text</label><input type="number" name="dummy_field" id="dummy_field" maxlength="100"  value="" placeholder="" /></div>';
        
        $this->assertEquals($this->object->double_field($name, $label, $size),$expected_result);
    }

    /**
     * @covers ITE\mysql->date_field
     */
    public function testDate_field()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $expected_result = '<div class="form-group"><label for="dummy_field">dummy text</label><input type="date" class="datepicker " name="dummy_field" id="dummy_field" value="" placeholder="" /></div>';
        
        $this->assertEquals($this->object->date_field($name, $label),$expected_result);
    }

    /**
     * @covers ITE\mysql->datetime_field
     */
    public function testDatetime_field()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $expected_result = '<div class="form-group"><label for="dummy_field">dummy text</label><input type="datetime-local" class="datetimepicker " name="dummy_field" id="dummy_field" value="" placeholder="" /></div>';
        
        $this->assertEquals($this->object->datetime_field($name, $label),$expected_result);
    }

    /**
     * @covers ITE\mysql->time_field
     */
    public function testTime_field()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $expected_result = '<div class="form-group"><label for="dummy_field">dummy text</label><input type="time" class="timepicker " name="dummy_field" id="dummy_field" value="" placeholder="" /></div>';
        
        $this->assertEquals($this->object->time_field($name, $label),$expected_result);
    }

    /**
     * @covers ITE\mysql->id_field
     */
    public function testId_field()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $expected_result = '<div class="form-group"><label for="dummy_field">dummy text</label><select name="dummy_field" id="dummy_field" disabled="disabled" size="1"  ><option value="0">Sin datos, deben crearse antes de este paso.</option></select></div>';
        
        $this->assertEquals($this->object->id_field($name, $label),$expected_result);
    }

    /**
     * @covers ITE\mysql->enum_field
     */
    public function testEnum_field()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $values = array(array('one','dummy'),array('two','dummy'),array('three','dummy'));
        $expected_result_1 = '<div class="form-group"><label for="dummy_field">dummy text</label><select name="dummy_field" id="dummy_field" size="1" ></select></div>';
        $expected_result_2 = '<div class="form-group"><label for="dummy_field">dummy text</label><select name="dummy_field" id="dummy_field" size="1" ><option value="dummy">one</option><option value="dummy">two</option><option value="dummy">three</option></select></div>';
        
        $this->assertEquals($expected_result_1,$this->object->enum_field($name, $label));
        $this->assertEquals($expected_result_2,$this->object->enum_field($name, $label,$values));
    }

    /**
     * @covers ITE\mysql->text_field
     */
    public function testText_field()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $expected_result = '<div class="form-group"><label for="dummy_field">dummy text</label><textarea name="dummy_field" id="dummy_field"  placeholder=""></textarea></div>';
        
        $this->assertEquals($expected_result,$this->object->text_field($name, $label));
    }

    /**
     * @covers ITE\mysql->hidden_field
     */
    public function testHidden_field()
    {
        $name = 'dummy_field';
        $label = 'dummy text';
        $expected_result = '<input type="hidden" name="dummy_field" id="dummy_field" value="dummy text" />';
        
        $this->assertEquals($expected_result,$this->object->hidden_field($name, $label));
    }

    /**
     * @covers ITE\mysql->field_config
     */
    public function testField_config()
    {
        $field_comment = '';
        $this->assertTrue($this->object->field_config($field_comment));
        $field_comment = 'label:dummy text';
        
        $this->assertInternalType('array',$this->object->field_config($field_comment));
        $this->assertArrayHasKey('label',$this->object->field_config($field_comment));
    }

    /**
     * @covers ITE\mysql->create_add_form_fields
     */
    public function testCreate_add_form_fields()
    {
        $table = 'log';
        $expected_result = '<div class="form-group"><label for="usuarios_id">Usuarios</label><select name="usuarios_id" id="usuarios_id" disabled="disabled" size="1"  ><option value="0">Sin datos, deben crearse antes de este paso.</option></select></div><div class="form-group"><label for="tabla">Tabla</label><input type="text" name="tabla" id="tabla" maxlength="250"  value="" placeholder="" /></div><div class="form-group"><label for="id">Id</label><input type="number" name="id" id="id" maxlength="10"  value="" placeholder="" /></div><div class="form-group"><label for="accion">Accion</label><input type="text" name="accion" id="accion" maxlength="100"  value="" placeholder="" /></div><div class="form-group"><label for="log">Log</label><textarea name="log" id="log"  placeholder=""></textarea></div><div class="form-group"><label for="fecha">Fecha</label><input type="datetime-local" class="datetimepicker " name="fecha" id="fecha" value="" placeholder="" /></div><input type="hidden" name="t" id="t" value="log" />';
        
        $this->assertEquals($expected_result,$this->object->create_add_form_fields($table));
    }

    /**
     * @covers ITE\mysql->create_edit_form_fields
     */
    public function testCreate_edit_form_fields()
    {
        $table = 'log';
        $fields = array('log');
        $values = array('dummy text');
        $result_id = $this->object->insert($table, $fields, $values);
        $expected_result = '<div class="form-group"><label for="usuarios_id">Usuarios</label><select name="usuarios_id" id="usuarios_id" disabled="disabled" size="1"  ><option value="0">Sin datos, deben crearse antes de este paso.</option></select></div><div class="form-group"><label for="tabla">Tabla</label><input type="text" name="tabla" id="tabla" maxlength="250"  value="" placeholder="" /></div><div class="form-group"><label for="id">Id</label><input type="number" name="id" id="id" maxlength="10"  value="0" placeholder="" /></div><div class="form-group"><label for="accion">Accion</label><input type="text" name="accion" id="accion" maxlength="100"  value="" placeholder="" /></div><div class="form-group"><label for="log">Log</label><textarea name="log" id="log"  placeholder="">dummy text</textarea></div><div class="form-group"><label for="fecha">Fecha</label><input type="datetime-local" class="datetimepicker " name="fecha" id="fecha" value="0000-00-00 00:00:00" placeholder="" /></div><input type="hidden" name="id" id="id" value="'.$result_id.'" /><input type="hidden" name="t" id="t" value="log" />';
        
        $this->assertEquals($expected_result,$this->object->create_edit_form_fields($table,$result_id));
        
        return $result_id;
    }

    /**
     * @covers ITE\mysql->create_add_form
     */
    public function testCreate_add_form()
    {
        $table = 'log';
        $url = 'http://dummy.domain';
        $expected_result = '<form class="add_form clearfix"  method="post" lang="es" enctype="multipart/form-data" action="http://dummy.domain"><div class="form-group"><label for="usuarios_id">Usuarios</label><select name="usuarios_id" id="usuarios_id" disabled="disabled" size="1"  ><option value="0">Sin datos, deben crearse antes de este paso.</option></select></div><div class="form-group"><label for="tabla">Tabla</label><input type="text" name="tabla" id="tabla" maxlength="250"  value="" placeholder="" /></div><div class="form-group"><label for="id">Id</label><input type="number" name="id" id="id" maxlength="10"  value="" placeholder="" /></div><div class="form-group"><label for="accion">Accion</label><input type="text" name="accion" id="accion" maxlength="100"  value="" placeholder="" /></div><div class="form-group"><label for="log">Log</label><textarea name="log" id="log"  placeholder=""></textarea></div><div class="form-group"><label for="fecha">Fecha</label><input type="datetime-local" class="datetimepicker " name="fecha" id="fecha" value="" placeholder="" /></div><input type="hidden" name="t" id="t" value="log" /><input type="submit" class="btn btn-success" value="Guardar datos" name="create" /></form>';
        
        $this->assertEquals($expected_result,$this->object->create_add_form($table,$url));
    }

    /**
     * @covers ITE\mysql->create_edit_form
     * @depends testCreate_edit_form_fields
     */
    public function testCreate_edit_form($result_id)
    {
        $table = 'log';
        $url = 'http://dummy.domain';
        $expected_result = '<form class="edit_form clearfix" " method="post" lang="es" enctype="multipart/form-data" action="http://dummy.domain"><div class="form-group"><label for="usuarios_id">Usuarios</label><select name="usuarios_id" id="usuarios_id" disabled="disabled" size="1"  ><option value="0">Sin datos, deben crearse antes de este paso.</option></select></div><div class="form-group"><label for="tabla">Tabla</label><input type="text" name="tabla" id="tabla" maxlength="250"  value="" placeholder="" /></div><div class="form-group"><label for="id">Id</label><input type="number" name="id" id="id" maxlength="10"  value="0" placeholder="" /></div><div class="form-group"><label for="accion">Accion</label><input type="text" name="accion" id="accion" maxlength="100"  value="" placeholder="" /></div><div class="form-group"><label for="log">Log</label><textarea name="log" id="log"  placeholder="">dummy text</textarea></div><div class="form-group"><label for="fecha">Fecha</label><input type="datetime-local" class="datetimepicker " name="fecha" id="fecha" value="0000-00-00 00:00:00" placeholder="" /></div><input type="hidden" name="id" id="id" value="'.$result_id.'" /><input type="hidden" name="t" id="t" value="log" /><input type="submit" class="btn btn-success" value="Modificar datos" name="update" /><input type="button" class="btn btn-warning del_warning" value="Borrar datos" name="delete" rel="log" ref="'.$result_id.'" /></form>';
        
        $this->assertEquals($expected_result,$this->object->create_edit_form($table,$result_id,$url));
    }

    /**
     * @covers ITE\mysql->create_table_rows
     */
    public function testCreate_table_rows()
    {
        $table = 'log';
        $table_id_field = 'logs_id';
        $columns = array('log,action,table');
        $expected_result = '<tr><td></td><td colspan="5">En estos momentos no existen datos.</td></tr>';
        
        $this->assertEquals($expected_result,$this->object->create_table_rows($table,$table_id_field,$columns));
    }
}
