<?php
namespace ITE;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-10 at 16:25:40.
 * @group ite
 * @group mysql
 * 
 */

class mysqlTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Error handler trait.
     */
    use errorHandler;
    
    /**
     * @var mysql
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @expectedExcpetion PHPUnit_Framework_Error
     */
    protected function setUp()
    {
        $this->initErrorHandler();
        $_ITE = ite::singleton();
        $this->object = new mysql($_ITE);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers ITE\mysql->reconnect
     */
    public function testReconnect()
    {
        $this->assertFalse($this->object->reconnect('dummyserver', DBUSER, DBPASS, DB));
        $this->assertTrue($this->object->reconnect(DBSERVER, DBUSER, DBPASS, DB));
    }

    /**
     * @covers ITE\mysql->bd_connect
     */
    public function testBd_connect()
    {
        $this->assertTrue($this->object->bd_connect());
    }

    /**
     * @covers ITE\mysql::log
     */
    public function testLog()
    {
        $result = $this->object->log('dummyTable','dummyId','dummyAction','dummyLog');
        $this->assertInternalType('integer',$result);
        $this->assertNotSame(0,$result);
    }

    /**
     * @covers ITE\mysql->consultar
     */
    public function testConsultar()
    {
        $this->assertCount(1,$this->object->consultar("log","1=1","log_id DESC LIMIT 1",false,false));
        $this->assertFalse($this->object->consultar("dummyTable","1=1","log_id DESC LIMIT 1",false,false));
    }

    /**
     * @covers ITE\mysql::select
     */
    public function testSelect()
    {
        $this->assertCount(1,$this->object->select("log","1=1","log_id DESC LIMIT 1",false,false));
        $this->assertFalse($this->object->select("dummyTable","1=1","log_id DESC LIMIT 1",false,false));
    }

    /**
     * @covers ITE\mysql->free_query
     */
    public function testFree_query()
    {
        $this->assertCount(1,$this->object->free_query("SELECT * FROM log WHERE 1=1 LIMIT 1",false));
        $this->assertArrayHasKey('num_elements',$this->object->free_query("SELECT * FROM log WHERE 1=1 LIMIT 1",true));
        $this->assertCount(2,$this->object->free_query("SELECT * FROM log WHERE 1=1 LIMIT 1;SELECT log_id FROM log WHERE 1=1 LIMIT 2",false));
        $this->assertFalse($this->object->free_query("SELECT * FROM log WHERE log_id = '0' LIMIT 1",true));
    }

    /**
     * @covers ITE\mysql->insertar
     */
    public function testInsertar()
    {
        $table = 'log';
        $fields = array('log');
        $values = array('dummy text');
        $this->assertInternalType('integer',$this->object->insertar($table, $fields, $values));
        $table = 'dummyTable';
        $this->assertFalse($this->object->insertar($table, $fields, $values));
    }

    /**
     * @covers ITE\mysql->insert
     */
    public function testInsert()
    {
        $table = 'log';
        $fields = array('log');
        $values = array('dummy text');
        $this->assertInternalType('integer',$this->object->insert($table, $fields, $values));
        $table = 'dummyTable';
        $this->assertFalse($this->object->insert($table, $fields, $values));
    }

    /**
     * @covers ITE\mysql::editar
     */
    public function testEditar()
    {
        $table = 'log';
        $values = array("log = 'Tested!'");
        $id = (int)$this->object->select($table,"1=1","log_id DESC LIMIT 1")[0]['log_id'];
        $this->assertInternalType('integer',$id);

        $this->assertTrue($this->object->editar($table, $values, $id));
        $this->assertFalse($this->object->editar($table, $values, '\'S'));
    }

    /**
     * @covers ITE\mysql::update
     */
    public function testUpdate()
    {
        $table = 'log';
        $values = array("log = 'Tested!'");
        $id = (int)$this->object->select($table,"1=1","log_id DESC LIMIT 1")[0]['log_id'];
        $this->assertInternalType('integer',$id);

        $this->assertTrue($this->object->editar($table, $values, $id));
        $this->assertFalse($this->object->editar($table, $values, '\'S'));
    }

    /**
     * @covers ITE\mysql::borrar
     * @todo   Implement testBorrar().
     */
    public function testBorrar()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::delete
     * @todo   Implement testDelete().
     */
    public function testDelete()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::get_columns_info
     * @todo   Implement testGet_columns_info().
     */
    public function testGet_columns_info()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::field_label
     * @todo   Implement testField_label().
     */
    public function testField_label()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::varchar_field
     * @todo   Implement testVarchar_field().
     */
    public function testVarchar_field()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::int_field
     * @todo   Implement testInt_field().
     */
    public function testInt_field()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::double_field
     * @todo   Implement testDouble_field().
     */
    public function testDouble_field()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::date_field
     * @todo   Implement testDate_field().
     */
    public function testDate_field()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::datetime_field
     * @todo   Implement testDatetime_field().
     */
    public function testDatetime_field()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::time_field
     * @todo   Implement testTime_field().
     */
    public function testTime_field()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::id_field
     * @todo   Implement testId_field().
     */
    public function testId_field()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::enum_field
     * @todo   Implement testEnum_field().
     */
    public function testEnum_field()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::text_field
     * @todo   Implement testText_field().
     */
    public function testText_field()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::hidden_field
     * @todo   Implement testHidden_field().
     */
    public function testHidden_field()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::field_config
     * @todo   Implement testField_config().
     */
    public function testField_config()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::create_add_form_fields
     * @todo   Implement testCreate_add_form_fields().
     */
    public function testCreate_add_form_fields()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::create_edit_form_fields
     * @todo   Implement testCreate_edit_form_fields().
     */
    public function testCreate_edit_form_fields()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::create_add_form
     * @todo   Implement testCreate_add_form().
     */
    public function testCreate_add_form()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::create_edit_form
     * @todo   Implement testCreate_edit_form().
     */
    public function testCreate_edit_form()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ITE\mysql::create_table_rows
     * @todo   Implement testCreate_table_rows().
     */
    public function testCreate_table_rows()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
